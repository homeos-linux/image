#!/bin/bash
# homeOS first login setup script
# This script runs automatically on first user login and when configuration updates

# Script version - increment when adding new features
SCRIPT_VERSION="5"
VERSION_FILE="$HOME/.config/homeos-first-login-version"
LANG_CODE=${LANG:0:2}

# Check current version
CURRENT_VERSION=""
if [ -f "$VERSION_FILE" ]; then
    CURRENT_VERSION=$(cat "$VERSION_FILE")
fi

# Check if Internet is available
if ! ping -c 1 8.8.8.8 &> /dev/null; then
    echo "⚠ No internet connection detected. Setup cannot continue."
    if [ "$LANG_CODE" = "de" ]; then
        notify-send "homeOS Setup" "Keine Internetverbindung erkannt. Bitte verbinden Sie sich mit dem Internet und starten Sie den Computer neu, um die Einrichtung abzuschließen." --icon=dialog-warning
    else
        notify-send "homeOS Setup" "No internet connection detected. Please connect to the internet and restart your computer to complete setup." --icon=dialog-warning
    fi
    exit 1
fi

# Skip if already run with same or newer version
if [ "$CURRENT_VERSION" = "$SCRIPT_VERSION" ]; then
    exit 0
fi

ZENITY_PIPE="/tmp/homeos-setup-zenity.pipe"
ZENITY_BG_PID=""
if command -v zenity &> /dev/null; then
    mkfifo "$ZENITY_PIPE"

    # Starte Zenity im Hintergrund
    if [ "$LANG_CODE" = "de" ]; then
        zenity --progress --pulsate --no-cancel --auto-close --width=400 \
            --title="homeOS Einrichtung" \
            --text="Bitte warten Sie während wir Ihr System konfigurieren..." < "$ZENITY_PIPE" &
    else
        zenity --progress --pulsate --no-cancel --auto-close --width=400 \
            --title="homeOS Setup" \
            --text="Please wait while we configure your system..." < "$ZENITY_PIPE" &
    fi
    ZENITY_BG_PID=$!

    # Schreib-Endpunkt der Pipe in Hintergrund offen halten
    exec 3> "$ZENITY_PIPE"
    if [ "$LANG_CODE" = "de" ]; then
        echo "# Bitte warten Sie während wir Ihr System konfigurieren..." >&3
    else
        echo "# Please wait while we configure your system..." >&3
    fi
fi

echo "Internet connection detected. Continuing setup..."

echo "Setting up homeOS user session (version $SCRIPT_VERSION)..."

# Show what's being updated if this is an upgrade
if [ -n "$CURRENT_VERSION" ] && [ "$CURRENT_VERSION" != "$SCRIPT_VERSION" ]; then
    echo "Upgrading homeOS user configuration from $CURRENT_VERSION to $SCRIPT_VERSION"
fi

# Read Flatpak list from flatpaks.txt file
FLATPAKS_FILE="/etc/homeos/flatpaks.txt"

# Install Flatpaks from the list
if [ -f "$FLATPAKS_FILE" ]; then
    echo "Reading Flatpaks from $FLATPAKS_FILE..."
    # Read non-empty, non-comment lines from the file
    FLATPAKS=($(grep -v '^[[:space:]]*#' "$FLATPAKS_FILE" | grep -v '^[[:space:]]*$' | tr '\n' ' '))
    
    if [ ${#FLATPAKS[@]} -gt 0 ]; then
        echo "Installing ${#FLATPAKS[@]} Flatpaks..."
        for flatpak in "${FLATPAKS[@]}"; do
            echo "Installing: $flatpak"
            flatpak install --system --noninteractive flathub "$flatpak" || echo "Failed to install $flatpak"
        done
        echo "✓ Flatpak applications installation complete"
    else
        echo "No Flatpaks specified for installation in $FLATPAKS_FILE"
    fi
else
    echo "Flatpaks file not found: $FLATPAKS_FILE"
    echo "You can create this file to specify Flatpaks to install"
fi

echo "Removing bloat..."
# List of packages to remove
PACKAGES_TO_REMOVE=(
    "org.gnome.Totem",
    "org.gnome.Evince"
)
# Remove the packages
if [ ${#PACKAGES_TO_REMOVE[@]} -gt 0 ]; then
    echo "Removing ${#PACKAGES_TO_REMOVE[@]} unnecessary packages..."
    for pkg in "${PACKAGES_TO_REMOVE[@]}"; do
        echo "Removing: $pkg"
        flatpak uninstall --system -y "$pkg" || echo "Failed to remove $pkg"
    done
    echo "✓ Unnecessary packages removal complete"
else
    echo "No packages specified for removal"
fi

# Apply Flatpak overrides for better integration
echo "Applying Flatpak overrides..."
flatpak override --user io.github.kolunmi.Bazaar --filesystem=host-etc
flatpak override --user --filesystem=xdg-config/gtk-3.0:rw
flatpak override --user --filesystem=xdg-config/gtk-4.0:rw
ln -sf $XDG_RUNTIME_DIR/{app/com.discordapp.Discord,}/discord-ipc-0
mkdir -p ~/.config/user-tmpfiles.d
touch ~/.config/user-tmpfiles.d/discord-rpc-flatpak-fix.conf
echo "L %t/discord-ipc-0 - - - - app/com.discordapp.Discord/discord-ipc-0" | tee ~/.config/user-tmpfiles.d/discord-rpc-flatpak-fix.conf

# Enable GNOME Shell extensions
echo "Enabling GNOME Shell extensions..."

# Enable each extension using dconf
dconf write /org/gnome/shell/enabled-extensions "['app-hider@lynith.dev', 'caffeine@patapon.info', 'AlphabeticalAppGrid@stuarthayhurst', 'dash-to-dock@micxgx.gmail.com', 'appindicatorsupport@rgcjonas.gmail.com', 'hide-cursor@elcste.com', 'panel-corners@aunetx', 'smile-extension@mijorus.it', 'grand-theft-focus@zalckos.github.com', 'blur-my-shell@aunetx', 'add-to-desktop@tommimon.github.com', 'gtk4-ding@smedius.gitlab.com']"

# Configure dash-to-dock extension
gsettings set org.gnome.shell.extensions.dash-to-dock dock-position BOTTOM
gsettings set org.gnome.shell.extensions.dash-to-dock extend-height false
gsettings set org.gnome.shell.extensions.dash-to-dock dock-fixed false
gsettings set org.gnome.shell.extensions.dash-to-dock autohide true
gsettings set org.gnome.shell.extensions.dash-to-dock intellihide true
gsettings set org.gnome.shell.extensions.dash-to-dock click-action 'minimize'
gsettings set org.gnome.shell.extensions.dash-to-dock transparency-mode 'DYNAMIC'
gsettings set org.gnome.shell.extensions.dash-to-dock min-alpha 0
gsettings set org.gnome.shell.extensions.dash-to-dock max-alpha 1

# Configure blur-my-shell extension
dconf write /org/gnome/shell/extensions/blur-my-shell/pipelines "{'pipeline_default': {'name': <'Default'>, 'effects': <[<{'type': <'native_static_gaussian_blur'>, 'id': <'effect_000000000000'>, 'params': <{'radius': <30>, 'brightness': <0.59999999999999998>}>}>]>}, 'pipeline_default_rounded': {'name': <'Default rounded'>, 'effects': <[<{'type': <'native_static_gaussian_blur'>, 'id': <'effect_000000000001'>, 'params': <{'radius': <30>, 'brightness': <0.59999999999999998>}>}>, <{'type': <'noise'>, 'id': <'effect_66568248059666'>, 'params': <{'noise': <0.40000000000000002>, 'lightness': <0.83999999999999997>}>}>, <{'type': <'corner'>, 'id': <'effect_000000000002'>, 'params': <{'radius': <24>}>}>]>}}"
gsettings set org.gnome.shell.extensions.blur-my-shell.panel blur true
gsettings set org.gnome.shell.extensions.blur-my-shell.panel brightness 0.59999999999999998
gsettings set org.gnome.shell.extensions.blur-my-shell.panel override-background-dynamically true
gsettings set org.gnome.shell.extensions.blur-my-shell.panel pipeline 'pipeline_default'
gsettings set org.gnome.shell.extensions.blur-my-shell.panel sigma 30
gsettings set org.gnome.shell.extensions.blur-my-shell.panel static-blur true

# Configure panel corners
dconf write /org/gnome/shell/extensions/panel-corners/panel-corners false

# Enable user-theme extension
gsettings set org.gnome.shell.extensions.user-theme name ""

# Configure GNOME settings
echo "Configuring GNOME settings..."

# Set up favorite apps in dock
gsettings set org.gnome.shell favorite-apps "['org.gnome.Nautilus.desktop', 'org.mozilla.firefox.desktop', 'org.gnome.Evolution.desktop', 'com.ranfdev.DistroShelf.desktop', 'io.github.kolunmi.Bazaar.desktop']"

# Configure interface settings
gsettings set org.gnome.desktop.interface clock-show-weekday true
gsettings set org.gnome.desktop.interface show-battery-percentage true
gsettings set org.gnome.desktop.interface enable-hot-corners false
gsettings set org.gnome.desktop.interface color-scheme 'prefer-dark'
gsettings set org.gnome.desktop.interface gtk-theme 'Adwaita-dark'

# Configure window management
gsettings set org.gnome.desktop.wm.preferences button-layout "appmenu:minimize,maximize,close"
gsettings set org.gnome.desktop.wm.preferences focus-mode 'click'

# Configure file manager
gsettings set org.gnome.nautilus.preferences show-hidden-files false
gsettings set org.gnome.nautilus.preferences show-image-thumbnails 'always'

# Set up wallpaper (if custom wallpaper exists)
if [ -f "/usr/share/backgrounds/homeos-default.jpg" ]; then
    gsettings set org.gnome.desktop.background picture-uri "file:///usr/share/backgrounds/homeos-default.jpg"
    gsettings set org.gnome.desktop.background picture-uri-dark "file:///usr/share/backgrounds/homeos-default.jpg"
fi

# Configure power settings
gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-ac-timeout 3600
gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-battery-timeout 1800

# Set up automatic screen lock
gsettings set org.gnome.desktop.screensaver lock-enabled true
gsettings set org.gnome.desktop.screensaver lock-delay 300

# Configure privacy settings
gsettings set org.gnome.desktop.privacy report-technical-problems false
gsettings set org.gnome.desktop.privacy send-software-usage-stats false

echo "✓ GNOME configuration complete"

# Set up custom GNOME keybindings
echo "Configuring custom GNOME shortcuts..."

# Close windows with Super-Q
gsettings set org.gnome.desktop.wm.keybindings close "['<Super>q']"

# Enable fullscreen with Super-F
gsettings set org.gnome.desktop.wm.keybindings toggle-fullscreen "['<Super>f']"

# Launch MissionCenter with Shift-Super-M
gsettings set org.gnome.settings-daemon.plugins.media-keys custom-keybindings "['/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/']"
gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ name "Resources"
gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ command "net.nokyan.Resources"
gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ binding "<Shift><Super>m"

# Open home folder with Super-E
gsettings set org.gnome.settings-daemon.plugins.media-keys home "['<Super>e']"

# Start default browser with Super-B
gsettings set org.gnome.settings-daemon.plugins.media-keys www "['<Super>b']"

echo "✓ Custom keybindings configured"

# Setup hidden apps
echo "Setting up hidden applications..."
dconf write /org/gnome/shell/extensions/app-hider/hidden-apps "['htop.desktop', 'nvtop.desktop', 'org.gnome.Ptyxis.desktop']"
echo "✓ Hidden applications configured"

# Set up demonhide autostart
echo "Setting up demonhide autostart..."
cat > "$HOME/.config/autostart/demonhide.desktop" << 'AUTOSTART_EOF'
[Desktop Entry]
Type=Application
Name=DemonHide
Comment=Hide system tray applications
Exec=demonhide
Hidden=false
NoDisplay=false
X-GNOME-Autostart-enabled=true
StartupNotify=false
AUTOSTART_EOF

echo "✓ DemonHide autostart configured"

# Set up GTK style
echo "Setting up GTK style..."
cp /etc/skel/.config/gtk-4.0/gtk.css "$HOME/.config/gtk-4.0/gtk.css"
echo "✓ GTK style configured"

# Mark setup as complete with version

mkdir -p "$HOME/.config"
echo "$SCRIPT_VERSION" > "$VERSION_FILE"
echo "✓ homeOS user setup complete (version $SCRIPT_VERSION)"

# Close zenity spinner if running
if [ -n "$ZENITY_BG_PID" ] && kill -0 "$ZENITY_BG_PID" 2>/dev/null; then
    echo 100 >&3  # schreib Fortschritt
    sleep 1
    kill "$ZENITY_BG_PID" 2>/dev/null
fi
rm -f "$ZENITY_PIPE"
exec 3>&-

# Show welcome notification (only on first install, not upgrades)
if [ -z "$CURRENT_VERSION" ] && command -v notify-send &> /dev/null; then
    LANG_CODE=${LANG:0:2}  # "de" für Deutsch, "en" für Englisch usw.
    if [ "$LANG_CODE" = "de" ]; then
        notify-send "Willkommen bei homeOS!" "Ihr Desktop wurde konfiguriert. Viel Spaß mit Ihrem neuen System!" --icon=dialog-information
    else
        notify-send "Welcome to homeOS!" "Your desktop has been configured. Enjoy your new system!" --icon=dialog-information
    fi
fi