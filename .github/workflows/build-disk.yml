name: Build Disk Images

on:
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform'
        required: true
        type: choice
        options:
          - amd64
          - arm64
        default: amd64
      upload-to-s3:
        description: 'Upload to S3'
        required: false
        type: boolean
        default: false

  pull_request:
    branches:
      - main
    paths:
      - 'disk_config/**'
      - '.github/workflows/build-disk.yml'

env:
  IMAGE_NAME: ${{ github.event.repository.name }}
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  DEFAULT_TAG: stable
  BIB_IMAGE: ghcr.io/lorbuschris/bootc-image-builder:20250608

jobs:
  build:
    name: Build Disk Images
    runs-on: ${{ inputs.platform == 'amd64' && 'ubuntu-24.04' || 'ubuntu-24.04-arm' }}
    strategy:
      matrix:
        disk-type: [anaconda-iso]
      fail-fast: false
    permissions:
      contents: read
      packages: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare environment variables
        run: |
          USER_UID=$(id -u)
          USER_GID=$(id -g)
          DISK_TYPE=$(echo "${{ matrix.disk-type }}" | tr ' ' '-')
          echo "IMAGE_REGISTRY=${IMAGE_REGISTRY,,}" >> ${GITHUB_ENV}
          echo "IMAGE_NAME=${IMAGE_NAME,,}" >> ${GITHUB_ENV}
          echo "DISK_TYPE=${DISK_TYPE}" >> ${GITHUB_ENV}
          echo "USER_UID=${USER_UID}" >> ${GITHUB_ENV}
          echo "USER_GID=${USER_GID}" >> ${GITHUB_ENV}

      - name: Install dependencies (Podman for ARM)
        if: inputs.platform == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y podman

      - name: Maximize build space (AMD only)
        if: inputs.platform != 'arm64'
        uses: ublue-os/remove-unwanted-software@v8
        with:
          remove-codeql: true

      - name: Build Disk Image
        id: build
        uses: osbuild/bootc-image-builder-action@v0.0.2
        with:
          builder-image: ${{ env.BIB_IMAGE }}
          config-file: ${{ matrix.disk-type == 'anaconda-iso' && './disk_config/iso.toml' || './disk_config/disk.toml' }}
          image: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DEFAULT_TAG }}
          chown: ${{ env.USER_UID }}:${{ env.USER_GID }}
          types: ${{ matrix.disk-type }}
          additional-args: --use-librepo=True

      - name: Upload Disk Image Artifacts
        if: inputs.upload-to-s3 != true && github.event_name != 'pull_request'
        uses: actions/upload-artifact@v5
        with:
          name: disk-images
          path: ${{ steps.build.outputs.output-directory }}

      - name: Upload to S3
        if: inputs.upload-to-s3 == true && github.event_name != 'pull_request'
        env:
          RCLONE_CONFIG_S3_TYPE: s3
          RCLONE_CONFIG_S3_PROVIDER: ${{ secrets.S3_PROVIDER }}
          RCLONE_CONFIG_S3_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
          RCLONE_CONFIG_S3_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
          RCLONE_CONFIG_S3_REGION: ${{ secrets.S3_REGION }}
          RCLONE_CONFIG_S3_ENDPOINT: ${{ secrets.S3_ENDPOINT }}
          SOURCE_DIR: ${{ steps.build.outputs.output-directory }}
        run: |
          sudo apt-get update
          sudo apt-get install -y rclone
          rclone copy $SOURCE_DIR S3:${{ secrets.S3_BUCKET_NAME }}